# 55
# 47이란 수를 골라서 뒤집은 다음 다시 원래 수에 더하면, 47 + 74 = 121 과 같이 대칭수(palindrome)가 됩니다.
# 물론 모든 수가 이토록 쉽게 대칭수를 만들어내지는 않습니다. 예를 들어 349의 경우,

# 349 + 943 = 1292
# 1292 + 2921 = 4213
# 4213 + 3124 = 7337

# 위에서 보는 것처럼 3번의 반복과정을 거쳐야 대칭수가 됩니다.

# 196과 같은 몇몇 수는 이와 같은 과정을 아무리 반복해도 대칭수가 되지 않을 것이라고 추측되는데, 이런 수를 라이크렐 수 (Lychrel number) 라고 부릅니다. 아직 증명되지는 않았지만, 문제 풀이를 위해서 일단 라이크렐 수가 존재한다고 가정하겠습니다.

# 또한 1만 이하의 수는, 50번 미만의 반복으로 대칭수가 되든지 라이크렐 수든지 둘 중 하나라고 합니다.
# 1만을 넘어서면 10677에 이르렀을 때 비로소 53번의 반복으로 4668731596684224866951378664 라는 28자리의 대칭수가 만들어집니다.

# 그러면 1만 이하에는 몇 개의 라이크렐 수가 존재합니까?



# a = 47
# reverse_a = str(a)[::-1]
# print(int(reverse_a) + a)

notpalindrome = 0

for i in range(1,10000):
    x = i
    count = 0
    end_loop = False
    while count < 50:
        k = x + int(str(x)[::-1]) # 대칭수의 합
        if str(k) == str(k)[::-1]: # 대칭수의 합도 대칭수 일때
            end_loop = True # True 값으로 반환하고 루프를 탈출(break)
            break
        x = k # x 에 대칭수 합을 넣고 다시 while 문 반복
        count += 1 # count 추가

    if end_loop == False: # = if not end_loop : 50번 돌렸을때도 대칭수가 아니면
        notpalindrome += 1 # 카운트를 해서 라이크렐 수를 찾는다.

print(notpalindrome)

